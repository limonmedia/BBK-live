{"generator":"Code Snippets v3.6.8","date_created":"2025-06-13 05:52","snippets":[{"id":30,"name":"mini cart calculation ","code":"add_action('wp_footer', function () {\n    ?>\n    <style>\n\t\t.elementor-menu-cart__products{\n\t\t\tmargin-bottom:auto;\n\t\t}\n\t\t.final-total{\n\t\t\tpadding-top:20px !important;\n\/* \t\t\tmargin-top:auto; *\/\n\t\t\tborder-top:1px solid #d5d8dc;\n\t\t}\n        .custom-mini-cart-line {\n            display: flex !important;\n            justify-content: space-between !important;\n            align-items: center;\n\t\t\t\n            font-size: 14px;\n            padding: 6px 0;\n            color: #797979;\n            font-weight: normal;\n            visibility: visible !important;\n            opacity: 1 !important;\n            width: 100%;\n        }\n        .custom-mini-cart-line strong {\n\t\t\tpadding-top:10px;\n            font-weight: 700;\n            color: #000;\n        }\n        .custom-mini-cart-line span {\n            font-weight: normal;\n        }\n        \/* Ensure visibility on mobile *\/\n        @media (max-width: 767px) {\n            .elementor-menu-cart__main .custom-mini-cart-line {\n                display: flex !important;\n                font-size: 13px !important;\n                padding: 4px 0 !important;\n                visibility: visible !important;\n                opacity: 1 !important;\n            }\n        }\n    <\/style>\n    <script>\n        function waitForMiniCartAndRun(callback) {\n            let attempts = 0;\n            const maxAttempts = 50; \/\/ 10 seconds\n            const checkExist = setInterval(() => {\n                const sideCart = document.querySelector(\".elementor-menu-cart__container, .elementor-menu-cart__main, .woocommerce-mini-cart\");\n                if (sideCart && sideCart.querySelectorAll(\".elementor-menu-cart__product\").length > 0) {\n                    clearInterval(checkExist);\n\/\/                     console.log(`Side cart detected after ${attempts} attempts`);\n                    callback();\n                } else {\n                    attempts++;\n\/\/                     console.log(`Side cart not found, attempt ${attempts}`);\n                    if (attempts >= maxAttempts) {\n                        clearInterval(checkExist);\n\/\/                         console.log(`Stopped retrying: Side cart not found after ${maxAttempts} attempts`);\n\/\/                         alert('Mini-cart not found. Please refresh the page.');\n                    }\n                }\n            }, 200);\n        }\n\n        function formatCurrency(amount) {\n            \/\/ Match DOM format: \"99kr\"\n            return `${Math.round(amount)}<span class=\"woocommerce-Price-currencySymbol\">kr<\/span>`;\n        }\n\n        function injectSavedAmount() {\n            const sideCart = document.querySelector(\".elementor-menu-cart__main\");\n            if (!sideCart) {\n\/\/                 console.log('Side cart container not found');\n                return;\n            }\n\n            const cartProducts = sideCart.querySelectorAll(\".elementor-menu-cart__product\");\n            let totalSaved = 0;\n            let totalOriginal = 0;\n\n\/\/             console.log(`Found products: ${cartProducts.length}`);\n\n            cartProducts.forEach((product, index) => {\n                const originalPriceEl = product.querySelector(\"del .woocommerce-Price-amount bdi\");\n                const salePriceEl = product.querySelector(\"ins .woocommerce-Price-amount bdi\") || product.querySelector(\".woocommerce-Price-amount bdi\");\n                const qtySelect = product.querySelector(\".mini-cart-qty\");\n\n                const quantity = qtySelect ? parseInt(qtySelect.value) || 1 : 1;\n                const originalPrice = originalPriceEl ? parseFloat(originalPriceEl.textContent.replace(\/[^\\d,.]\/g, '').replace(',', '.')) : 0;\n                const currentPrice = salePriceEl ? parseFloat(salePriceEl.textContent.replace(\/[^\\d,.]\/g, '').replace(',', '.')) : originalPrice;\n\n                const savedAmountSingle = (originalPrice && originalPrice > currentPrice) ? originalPrice - currentPrice : 0;\n                const savedAmountTotal = savedAmountSingle * quantity;\n\n                totalSaved += savedAmountTotal;\n                totalOriginal += (originalPrice || currentPrice) * quantity;\n\n\/\/                 console.log(`Product ${index}: Original=${originalPrice}, Sale=${currentPrice}, Qty=${quantity}, Saved=${savedAmountTotal}`);\n            });\n\n            const subtotalEl = sideCart.querySelector('.elementor-menu-cart__subtotal .woocommerce-Price-amount');\n            const parent = subtotalEl?.closest('.elementor-menu-cart__subtotal');\n            const container = parent?.parentElement;\n\n            if (!subtotalEl || !parent || !container) {\n\/\/                 console.log('Subtotal element or parent not found');\n                return;\n            }\n\n            \/\/ Remove existing custom lines\n            container.querySelectorAll('.custom-mini-cart-line.saved-amount, .custom-mini-cart-line.final-total').forEach(el => el.remove());\n\n            const finalTotal = totalOriginal - totalSaved;\n\n            \/\/ Add \"Totalt \u00e5 betale\"\n            const totalLine = document.createElement('div');\n            totalLine.className = 'custom-mini-cart-line final-total';\n            totalLine.innerHTML = `<strong>Totalt \u00e5 betale:<\/strong><strong>${formatCurrency(finalTotal)},-<\/strong>`;\n\n            \/\/ Add \"Du sparer\"\n            const savedLine = document.createElement('div');\n            savedLine.className = 'custom-mini-cart-line saved-amount';\n            savedLine.innerHTML = `Du sparer:<span>${formatCurrency(totalSaved)},-<\/span>`;\n\n            \/\/ Insert lines\n            if (totalSaved > 0) {\n                parent.insertAdjacentElement('afterend', savedLine);\n            }\n            parent.insertAdjacentElement('afterend', totalLine);\n\n\/\/             console.log('Total and savings lines appended');\n        }\n\n        \/\/ Initialize on DOM load\n        document.addEventListener('DOMContentLoaded', () => {\n            waitForMiniCartAndRun(injectSavedAmount);\n\n            \/\/ MutationObserver for dynamic cart changes\n            const observer = new MutationObserver(() => {\n\/\/                 console.log('Cart DOM changed');\n                waitForMiniCartAndRun(injectSavedAmount);\n            });\n            observer.observe(document.querySelector('.elementor-menu-cart__main') || document.body, { childList: true, subtree: true });\n        });\n\n        \/\/ WooCommerce cart events\n        jQuery(document.body).on('updated_wc_div updated_cart_totals wc_fragments_refreshed added_to_cart removed_from_cart', (event) => {\n\/\/             console.log(`Cart event: ${event.type}`);\n            waitForMiniCartAndRun(injectSavedAmount);\n        });\n\n        \/\/ Quantity change handler\n        jQuery(document).on('change', '.mini-cart-qty', function () {\n            const quantity = jQuery(this).val();\n            const cart_item_key = jQuery(this).data('cart-key');\n\n            jQuery.post('<?php echo admin_url(\"admin-ajax.php\"); ?>', {\n                action: 'update_cart_quantity',\n                quantity: quantity,\n                cart_item_key: cart_item_key\n            }, (response) => {\n                if (response.success && response.data.fragments) {\n                    jQuery.each(response.data.fragments, (selector, content) => {\n                        jQuery(selector).html(content);\n                    });\n                    waitForMiniCartAndRun(injectSavedAmount);\n                } else {\n\/\/                     console.log('Quantity update failed:', response);\n                    alert('Failed to update quantity. Please try again.');\n                }\n            });\n        });\n    <\/script>\n    <?php\n});\n","active":true,"modified":"2025-06-06 20:59:08","revision":"87"}]}